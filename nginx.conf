server{
    listen 80;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /static/ {
        root /usr/share/nginx/html;
    }

    location /blog/ {
        alias /usr/share/nginx/html/blog/;
        index blog_list.html;
        try_files $uri $uri/ /blog/index.html =404;
    }

    location /board/ {
        alias /usr/share/nginx/html/board/;
        index index.html;
        try_files $uri $uri/ /board/index.html =404;
    }

    location /static/board_files/ {
        alias /usr/share/nginx/html/static/board_files/;
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
    }

    # /docs 요청은 게이트웨이의 /docs로 전달
    location /docs {
        proxy_pass http://api_gateway:8000/docs;
    }
    # /redoc 요청은 게이트웨이의 /redoc로 전달
    location /redoc {
        proxy_pass http://api_gateway:8000/redoc;
    }
    location /api/ {
        proxy_pass http://api_gateway:8000;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        add_header 'Access-Control-Allow-Origin' '$http_origin' always; 
        add_header 'Access-Control-Allow-Credentials' 'true' always; 
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always; 
        add_header 'Access-Control-Allow-Headers' 'Content-Type, X-User-Id, Authorization' always; 

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    client_max_body_size 10M;
}